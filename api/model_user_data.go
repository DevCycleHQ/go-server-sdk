/*
 * DevCycle Bucketing API
 *
 * Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package api

import (
	"time"

	"golang.org/x/exp/maps"
)

type User struct {
	// Unique id to identify the user
	UserId string `json:"user_id"`
	// User's email used to identify the user on the dashboard / target audiences
	Email string `json:"email,omitempty"`
	// User's name used to identify the user on the dashboard / target audiences
	Name string `json:"name,omitempty"`
	// User's language in ISO 639-1 format
	Language string `json:"language,omitempty"`
	// User's country in ISO 3166 alpha-2 format
	Country string `json:"country,omitempty"`
	// App Version of the running application
	AppVersion string `json:"appVersion,omitempty"`
	// App Build number of the running application
	AppBuild string `json:"appBuild,omitempty"`
	// User's custom data to target the user with, data will be logged to DevCycle for use in dashboard.
	CustomData map[string]interface{} `json:"customData,omitempty"`
	// User's custom data to target the user with, data will not be logged to DevCycle only used for feature bucketing.
	PrivateCustomData map[string]interface{} `json:"privateCustomData,omitempty"`
	// User's device model
	DeviceModel string `json:"deviceModel,omitempty"`
	// Date the user was created, Unix epoch timestamp format
	LastSeenDate time.Time `json:"lastSeenDate,omitempty"`
}

type PopulatedUser struct {
	User
	*PlatformData
	// Date the user was created, Unix epoch timestamp format
	CreatedDate time.Time `json:"createdDate,omitempty"`
}

func (user User) GetPopulatedUser(platformData *PlatformData) PopulatedUser {
	return PopulatedUser{
		user,
		platformData,
		time.Now(),
	}
}

// GetPopulatedUserWithTime returns a populated user with a specific created date
func (user User) GetPopulatedUserWithTime(platformData *PlatformData, createDate time.Time) PopulatedUser {
	return PopulatedUser{
		user,
		platformData,
		createDate,
	}
}

type UserFeatureData struct {
	User        User `json:"user"`
	FeatureVars map[string]string
}

func (p *PopulatedUser) MergeClientCustomData(ccd map[string]interface{}) {
	if p.CustomData == nil {
		p.CustomData = make(map[string]interface{})
	}
	for k, v := range ccd {
		if _, ok := p.CustomData[k]; !ok && (p.PrivateCustomData != nil && p.PrivateCustomData[k] == nil) {
			p.CustomData[k] = v
		}
	}
}

func (p *PopulatedUser) CombinedCustomData() map[string]interface{} {
	ret := make(map[string]interface{}, len(p.CustomData)+len(p.PrivateCustomData))
	maps.Copy(ret, p.CustomData)
	maps.Copy(ret, p.PrivateCustomData)
	return ret
}
